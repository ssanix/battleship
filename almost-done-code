(import image)
(import canvas)
(import reactive)
(import lab)

(define white-peg
  (overlay
    (circle 10 "outline" "black")
    (circle 10 "solid" "white")))

(define red-peg
  (overlay
    (circle 10 "outline" "black")
    (circle 10 "solid" "red")))
 
(define flame-parts
  (lambda (width height color)
    (path width height (list (pair (* width 0.5) (* height 0.1))  ; Top point
      (pair (* width 0.3) (* height 0.4))
      (pair (* width 0.2) (* height 0.6))
      (pair (* width 0.25) (* height 0.8))
      (pair (* width 0.4) (* height 0.9))
      (pair (* width 0.5) (* height 0.95))
      (pair (* width 0.6) (* height 0.9))
      (pair (* width 0.75) (* height 0.8))
      (pair (* width 0.8) (* height 0.6))
      (pair (* width 0.7) (* height 0.4)))
      "solid" color)))

(define flame-part2
  (lambda (width height)
    (overlay/align "middle" "bottom"
      (flame-parts (/ width 1.5) (/ height 1.5) "yellow")
     (flame-parts width height "orange"))))

(define flame
  (lambda (width height)
    (overlay/offset (* width -0.335) (* height -0.64)
      (flame-parts (/ width 3) (/ height 3) "white")
      (flame-part2 width height))))

; Ship sizes: Carrier (5), Battleship (4), Cruiser (3), Submarine (3), Destroyer (2)
(define ship-sizes (list 5 4 3 3 2))

(define square-piece
  (lambda (size)
    (overlay/align "middle" "center"
                    (circle (/ size 5) "solid" "black")
                    (square size "outline" "black")
                    (square size "solid" "gray"))))

(define is-valid-ship-placement?
  (lambda (clicked-index ship-length turns griddy)
    (let* ([row (quotient clicked-index 10)]
           [col (remainder clicked-index 10)]
           [max-col (- 10 ship-length)])
      (and (>= clicked-index 0) (< clicked-index 100)
           (<= col max-col) (cond
                              [(= i ship-length) #t]
                              [(not (equal? (vector-ref griddy (+ clicked-index i)) 1)) #f]
                              [else (i 0 (+ i 1))])))))

(define grid-vec
  (lambda (vec i griddy)
    (if (>= i (vector-length vec))
      void
      (begin
        (let* ([ship-grid (overlay (solid-circle 15 "black")
                                 (solid-square 50 "green"))])
      (if (equal? (vector-ref griddy i) 1); water
          (vector-set! vec i (square-piece 50))
      (if (equal? (vector-ref griddy i) -100) ;sunk no peg
          (vector-set! vec i (overlay (flame 40 40) (overlay ship-grid (square-piece 50))));
      (if (< (vector-ref griddy i) -100); sunk pegs
          (if (equal? (vector-ref griddy i) -300)
              (vector-set! vec i (overlay white-peg (flame 40 40) (overlay ship-grid (square-piece 50)))) ; sunk white peg
              (vector-set! vec i (overlay red-peg (flame 40 40) (overlay ship-grid (square-piece 50))))); sunk red peg
          (if (negative? (vector-ref griddy i));ships
          (if (equal? (vector-ref griddy i) -2)
              (vector-set! vec i (overlay red-peg (overlay ship-grid (square-piece 50)))) ;red peg with ship
              (if (equal? (vector-ref griddy i) -3)
                  (vector-set! vec i (overlay white-peg (overlay ship-grid (square-piece 50))));white peg with ship
                  (vector-set! vec i (overlay ship-grid (square-piece 50))))) ;ship
          (if (odd? (vector-ref griddy i)) ;pegs
              (vector-set! vec i (overlay white-peg (square-piece 50))) ;white peg
              (vector-set! vec i (overlay red-peg (square-piece 50))))))))); red peg
      (grid-vec vec (+ i 1) griddy)
      vec))))

(define grid0 (make-vector 100 1))
(define grid1 (make-vector 100 1))

(define grid
  (grid-vec grid0 0))

;initial model struct
(struct state (peg x y griddy-p1 griddy-p2 turns ships-p1 ships-p2))

(define grid-maker
  (lambda (st canvass i k j vec ships turns)
    (if (equal? k 500)
      null
      (begin (canvas-drawing! canvass i k (vector-ref vec j))
       (canvas-text! canvass 10 30
         (if (null? ships) 
             "" 
             (string-append "Place " (number->string (car ships)) "-grid horizontal ship")) 30 "solid" "yellow")
       (canvas-text! canvass 100 100 (string-append "ships: " (number->string (length ships))) 30 "solid" "white")
       (canvas-text! canvass 300 100 (string-append "player " (number->string turns)) 30 "solid" "white")
       (if (< i 450)
           (grid-maker st canvass (+ i 50) k (+ j 1) vec ships turns)
           (grid-maker st canvass 0 (+ k 50) (+ j 1) vec ships turns))))))
 
; view function
(define view
  (lambda (st canvass)
    (match st
      [(state peg x y griddy-p1 griddy-p2 turns ships-p1 ships-p2)
        (begin
          (ignore
            (begin
          ;;; This is purposefully low-level for testing
            (if (negative? turns)
            (grid-maker st canvass 0 0 0 (grid-vec (make-vector 100 0) 0 griddy-p1) ships-p1 turns)
            (grid-maker st canvass 0 0 0 (grid-vec (make-vector 100 0) 0 griddy-p2) ships-p2 turns)
              ))))])))

(define canv (make-canvas 500 500))

(define confetti
  (let* ([animation (ignore
                      (animate-with
                        (lambda (time)
                          (let* ([pos (remainder (round time) 1000)]
                                 [pos1 (remainder (round time) 1500)]
                                 [pos2 (remainder (round time) 1600)]
                                 [pos3 (remainder (round time) 1700)]
                                 [pos4 (remainder (round time) 1800)])
                          (begin
                            (canvas-rectangle! canv 0 0 1000 1000 "solid" "white")
                            (canvas-circle! canv 30 (+ 40 pos) 20 "solid" "green")
                            (canvas-circle! canv 30 (+ 40 pos1) 20 "solid" "green")
                              (canvas-circle! canv 30 (+ 40 pos2) 20 "solid" "green")
                           (canvas-circle! canv 30 (+ 40 pos3) 20 "solid" "green")
                           (canvas-circle! canv 30 (+ 40 pos4) 20 "solid" "green")
                            (canvas-circle! canv 70 (+ 80 pos) 20 "solid" "purple")
                          (canvas-circle! canv 70 (+ 80 pos1) 20 "solid" "purple")
                          (canvas-circle! canv 70 (+ 80 pos2) 20 "solid" "purple")
                          (canvas-circle! canv 70 (+ 80 pos3) 20 "solid" "purple")
                          (canvas-circle! canv 70 (+ 80 pos4) 20 "solid" "purple")
                            (canvas-circle! canv 110 (+ 180 pos) 20 "solid" "pink")
                           (canvas-circle! canv 110 (+ 180 pos1) 20 "solid" "pink")
                           (canvas-circle! canv 110 (+ 180 pos2) 20 "solid" "pink")
                           (canvas-circle! canv 110 (+ 180 pos3) 20 "solid" "pink")
                          (canvas-circle! canv 110 (+ 180 pos4) 20 "solid" "pink")
                             (canvas-circle! canv 150 pos 20 "solid" "red")
                          (canvas-circle! canv 150 pos1 20 "solid" "red")
                          (canvas-circle! canv 150 pos2 20 "solid" "red")
                          (canvas-circle! canv 150 pos3 20 "solid" "red")
                           (canvas-circle! canv 150 pos4 20 "solid" "red")
                            #t)))))])
     (begin animation
            canv)))

(define update
  (lambda (msg st)
    (match st
      [(state peg x y griddy-p1 griddy-p2 turns ships-p1 ships-p2)
        (match msg
          [(event-mouse-click btn cx cy)
         (let* ([red-pegs-p1 (filter (lambda (cell) (> cell 100)) (vector->list griddy-p1))]
                [red-pegs-p2 (filter (lambda (cell) (> cell 100)) (vector->list griddy-p2))])
           (if (or (>= (length red-pegs-p1) 17) (>= (length red-pegs-p2) 17))
               confetti
      (if (or (not (null? ships-p1)) (not (null? ships-p2)))
        (if (negative? turns)
          (let* ([clicked-index (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50))))]
                 [current-ship-length (car ships-p1)]
                 [indices (make-vector current-ship-length 0)]
                 [a (vector-for-each 
                     (lambda (i) 
                       (vector-set! griddy-p1 (+ clicked-index i) -1)) 
                     (vector-range current-ship-length))])
              (state peg x y griddy-p1 griddy-p2 (* turns -1) (cdr ships-p1) ships-p2))
          (let* ([clicked-index (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50))))]
                 [current-ship-length (car ships-p2)]
                 [indices (make-vector current-ship-length 0)]
                 [a (vector-for-each 
                     (lambda (i) 
                       (vector-set! griddy-p2 (+ clicked-index i) -1)) 
                     (vector-range current-ship-length))])
              (state peg x y griddy-p1 griddy-p2 (* turns -1) ships-p1 (cdr ships-p2))))
           (if (negative? turns)
             (if (negative? (vector-ref griddy-p2 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50))))))              
            (let* ([a (vector-set! griddy-p1 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50)))) (* (vector-ref griddy-p1 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50))))) 2))];set peg on grid 1 to red
                   [b (vector-set! griddy-p2 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50)))) (* (vector-ref griddy-p2 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50))))) 100))]); set ship to hit on grid 2
              (state peg x y griddy-p1 griddy-p2 (* turns -1) ships-p1 ships-p2))
               (let* ([a (vector-set! griddy-p1 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50)))) (* (vector-ref griddy-p1 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50))))) 3))]);set peg on grid 1 to white
              (state peg x y griddy-p1 griddy-p2 (* turns -1) ships-p1 ships-p2)))
            (if (negative? (vector-ref griddy-p1 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50))))))       
            (let* ([a (vector-set! griddy-p2 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50)))) (* (vector-ref griddy-p2 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50))))) 2))];set peg on grid 2 to red
                   [b (vector-set! griddy-p1 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50)))) (* (vector-ref griddy-p1 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50))))) 100))]);set ship to hit on grid 1
              (state peg x y griddy-p1 griddy-p2 (* turns -1) ships-p1 ships-p2))
              (let* ([a (vector-set! griddy-p2 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50)))) (* (vector-ref griddy-p2 (truncate (+ (* (truncate (/ cy 50)) 10) (truncate (/ cx 50))))) 3))]); set peg on grid 2 to white
              (state peg x y griddy-p1 griddy-p2 (* turns -1) ships-p1 ships-p2))))
        )))]
    )])))

(display
  (reactive-canvas
    500 500
    ;initial model
      (state (circle 10 "solid" "black") 15 15 grid0 grid1 1 ship-sizes ship-sizes)
    ;view function
      view
    ;update fucntion
      update
    ;subscriptions
    (on-mouse-click)))

(problem "Click anywhere on the canvas to place the peg.
  \n Tip: You have to click exactly in the middle of the
          black circle to place the red/white peg accurately.
  \n Tip: The first click makes a red peg, click a second time to place a white peg on the grid")
