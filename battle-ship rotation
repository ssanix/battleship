; battle-ship-music.scm
(import music)

(define beat-dur qn)

(struct Note (Midi Dur))

(struct Rest (Dur))

(define pitch!
  (lambda (Midi Accidental)
    (cond
      [(equal? Accidental "Flat") (- Midi 1)]
      [(equal? Accidental "Natural") Midi]
      [(equal? Accidental "Sharp") (+ Midi 1)])))

(define A2 (lambda (Accidental Dur) (Note (pitch! 45 Accidental) Dur)))

(define B2 (lambda (Accidental Dur) (Note (pitch! 47 Accidental) Dur)))

(define C3 (lambda (Accidental Dur) (Note (pitch! 48 Accidental) Dur)))

(define D3 (lambda (Accidental Dur) (Note (pitch! 50 Accidental) Dur)))

(define E3 (lambda (Accidental Dur) (Note (pitch! 52 Accidental) Dur)))

(define F3 (lambda (Accidental Dur) (Note (pitch! 53 Accidental) Dur)))

(define G3 (lambda (Accidental Dur) (Note (pitch! 55 Accidental) Dur)))

(define A3 (lambda (Accidental Dur) (Note (pitch! 57 Accidental) Dur)))

(define B3 (lambda (Accidental Dur) (Note (pitch! 59 Accidental) Dur)))

(define C4 (lambda (Accidental Dur) (Note (pitch! 60 Accidental) Dur)))

(define D4 (lambda (Accidental Dur) (Note (pitch! 62 Accidental) Dur)))

(define E4 (lambda (Accidental Dur) (Note (pitch! 64 Accidental) Dur)))

(define F4 (lambda (Accidental Dur) (Note (pitch! 65 Accidental) Dur)))

(define G4 (lambda (Accidental Dur) (Note (pitch! 67 Accidental) Dur)))

(define A4 (lambda (Accidental Dur) (Note (pitch! 69 Accidental) Dur)))

(define B4 (lambda (Accidental Dur) (Note (pitch! 71 Accidental) Dur)))

(define C5 (lambda (Accidental Dur) (Note (pitch! 72 Accidental) Dur)))

(define D5 (lambda (Accidental Dur) (Note (pitch! 74 Accidental) Dur)))

(define E5 (lambda (Accidental Dur) (Note (pitch! 76 Accidental) Dur)))

(define A2-voice (list (Rest (dur 5 1)) (A2 "Natural" wn)))

(define B2-voice (list (Rest (dur 9 2)) (B2 "Natural" hn) (Rest wn)))

(define C3-voice (list (Rest (dur 4 1)) (C3 "Natural" hn) (Rest (dur 3 2))))

(define D3-voice (list (Rest (dur 7 2)) (D3 "Natural" hn) (Rest (dur 2 1))))

(define E3-voice (list (Rest wn) (E3 "Natural" wn) (E3 "Natural" wn) (E3 "Natural" hn) (Rest (dur 3 2))
                       (E3 "Natural" wn)))

(define F3-voice (list (Rest (dur 9 2)) (F3 "Sharp" hn) (Rest wn)))

(define G3-voice (list (Rest wn) (G3 "Natural" wn) (G3 "Natural" wn) (G3 "Natural" hn) (G3 "Natural" hn)
                       (G3 "Natural" hn) (Rest (dur 3 2))))

(define A3-voice (list (Rest (dur 6 1))))

(define B3-voice (list (Rest (dur 5 8)) (B3 "Natural" en) (Rest (dur 7 8)) (B3 "Natural" en) (Rest (dur 7 8))
                       (B3 "Natural" en) (Rest qn) (B3 "Natural" hn) (B3 "Natural" hn) (B3 "Natural" hn)
                       (Rest (dur 3 2))))

(define C4-voice (list (Rest (dur 6 1))))

(define D4-voice (list (Rest (dur 6 1))))

(define E4-voice (list (Rest (dur 6 8)) (E4 "Natural" en) (Rest qn) (E4 "Natural" hn) (Rest en) (E4 "Natural" en)
                       (Rest qn) (E4 "Natural" hn) (Rest en) (E4 "Natural" en) (Rest hn) (E4 "Natural" en)
                       (Rest (dur 3 8)) (E4 "Natural" en) (Rest (dur 2 1))))

(define F4-voice (list (Rest (dur 7 8)) (F4 "Sharp" en) (Rest (dur 7 8)) (F4 "Sharp" en) (Rest (dur 7 8))
                       (F4 "Sharp" en) (Rest qn) (F4 "Sharp" en) (Rest (dur 3 8)) (F4 "Sharp" en)
                       (Rest (dur 17 8))))

(define G4-voice (list (Rest wn) (G4 "Natural" en) (Rest (dur 7 8)) (G4 "Natural" en) (Rest (dur 7 8))
                       (G4 "Natural" qn) (Rest qn) (G4 "Natural" qn) (Rest (dur 9 4))))

(define A4-voice (list (Rest (dur 19 4)) (A4 "Natural" en) (Rest wn) (A4 "Natural" en)))

(define B4-voice (list (Rest (dur 4 1)) (B4 "Natural" qn) (B4 "Natural" qn) (B4 "Natural" en) (B4 "Natural" en)
                       (Rest en) (B4 "Natural" en) (Rest (dur 3 4)) (B4 "Natural" en) (Rest en)))

(define C5-voice (list (Rest (dur 5 1)) (C5 "Natural" en) (C5 "Natural" hn) (C5 "Natural" en) (Rest qn)))

(define D5-voice (list (Rest (dur 6 1))))

(define E5-voice (list (Rest (dur 6 1))))

(composition? E5)

(define dur-scale
  (lambda (dur-1 scalar)
    (let ([num-1 (numerator dur-1)]
          [den-1 (denominator dur-1)])
      (dur (* num-1 scalar) den-1))))

(define dur-ratio
  (lambda (dur-1 dur-2)
    (let ([num-1 (numerator dur-1)]
          [den-1 (denominator dur-1)]
          [num-2 (numerator dur-2)]
          [den-2 (denominator dur-2)])
      (/ (/ num-1 den-1) (/ num-2 den-2)))))

(define note-rest-length
  (lambda (note-rest)
    (let* ([fps 60]
           [spm 60]
           [fpm (* fps spm)]
           [fpb (/ fpm bpm)])
      (cond
        [(Note? note-rest) (* fpb (dur-ratio (Note-Dur note-rest) beat-dur))]
        [(Rest? note-rest) (* fpb (dur-ratio (Rest-Dur note-rest) beat-dur))]))))

(define voice-length
  (lambda (voice)
    (apply + (map note-rest-length voice))))

(define play-note-rest
  (lambda (note-rest)
    (cond
      [(Note? note-rest) (note (Note-Midi note-rest) (Note-Dur note-rest))]
      [(Rest? note-rest) (rest (Rest-Dur note-rest))])))

(define play-voice
  (lambda (voice)
    (apply seq (map play-note-rest voice))))

(define play-sheet
  (lambda (sheet)
    (mod (tempo beat-dur 120) (apply par (map play-voice sheet)))))

(define melody2
  (list
    A2-voice
    D3-voice
    E3-voice
    G3-voice
    F3-voice
    E3-voice
    D3-voice
    C3-voice
    B2-voice
    A2-voice
    C4-voice
    D4-voice
    E4-voice
    F4-voice
    G4-voice
    E5-voice
    A4-voice
    B4-voice
    C5-voice
    D5-voice
    B3-voice
    E4-voice
    G3-voice
    C4-voice
    A4-voice
    D3-voice
    F3-voice
    C3-voice
    E4-voice
    G4-voice
    A4-voice
    F4-voice
    E3-voice
    G4-voice
    C5-voice
    D5-voice
    A2-voice
    B3-voice
    E5-voice
    F4-voice
    G4-voice
    B2-voice
    A4-voice
    C4-voice
    D4-voice
    G3-voice
    B4-voice
    F3-voice
    E4-voice
    D5-voice
    E5-voice
    E5-voice
    G4-voice
    C5-voice
    B4-voice
    A4-voice
    F4-voice
    C5-voice
    E3-voice
    G4-voice
    E4-voice
    A3-voice
    D5-voice
    A4-voice
    C4-voice
    G3-voice
    D4-voice
    B3-voice
    A4-voice
    B4-voice))
(play-sheet melody2)